/**
 * SENTINEL SECURITY MIDDLEWARE
 * Enterprise-grade security middleware with comprehensive protection
 */

import { NextRequest, NextResponse } from 'next/server';
import { AuthService } from '@/lib/auth';
import { rateLimiters } from '@/lib/rate-limiter';
import { auditLogger } from '@/lib/audit-logger';
import { configUtils } from '@/lib/config';
import { v4 as uuidv4 } from 'uuid';

// Protected routes that require authentication
const PROTECTED_ROUTES = [
  '/api/users',
  '/api/documents',
  '/api/alerts',
  '/api/dashboard',
  '/api/ai',
  '/dashboard',
  '/users',
  '/documents',
  '/alerts',
  '/ai-chat',
];

// Admin-only routes
const ADMIN_ROUTES = [
  '/api/users',
  '/api/admin',
  '/admin',
];

// Routes that require specific roles
const ROLE_ROUTES: Record<string, string[]> = {
  '/api/alerts': ['admin', 'analyst', 'operator'],
  '/api/dashboard/analytics': ['admin', 'analyst'],
  '/api/documents/upload': ['admin', 'analyst', 'operator'],
  '/alerts': ['admin', 'analyst', 'operator'],
  '/dashboard/analytics': ['admin', 'analyst'],
};

/**
 * Main security middleware function
 */
export async function middleware(req: NextRequest) {
  const requestId = uuidv4();
  const startTime = Date.now();
  const pathname = req.nextUrl.pathname;
  const method = req.method;

  try {
    // Set request ID for tracking
    const requestHeaders = new Headers(req.headers);
    requestHeaders.set('x-request-id', requestId);

    // Set audit context
    auditLogger.setRequestContext(requestId, {
      method,
      url: pathname,
      userAgent: req.headers.get('User-Agent'),
      ipAddress: getClientIP(req),
      timestamp: new Date(),
    });

    // Apply security headers to all responses
    const response = NextResponse.next({
      request: {
        headers: requestHeaders,
      },
    });

    // Add comprehensive security headers
    const securityHeaders = configUtils.getSecurityHeaders();
    Object.entries(securityHeaders).forEach(([key, value]) => {
      response.headers.set(key, value);
    });

    // Additional security headers
    response.headers.set('X-Request-ID', requestId);
    response.headers.set('X-Content-Type-Options', 'nosniff');
    response.headers.set('X-DNS-Prefetch-Control', 'off');
    response.headers.set('X-Download-Options', 'noopen');
    response.headers.set('X-Permitted-Cross-Domain-Policies', 'none');

    // Security checks for suspicious requests
    if (await isRequestSuspicious(req)) {
      await auditLogger.logSecurityEvent({
        action: 'security_violation',
        severity: 'high',
        details: {
          type: 'suspicious_request',
          method,
          path: pathname,
          userAgent: req.headers.get('User-Agent'),
          reason: 'Request flagged as suspicious',
        },
        ipAddress: getClientIP(req),
        userAgent: req.headers.get('User-Agent') || undefined,
        requestId,
      });

      return new NextResponse(
        JSON.stringify({ error: 'Request blocked' }),
        {
          status: 403,
          headers: {
            'Content-Type': 'application/json',
            ...Object.fromEntries(response.headers.entries()),
          },
        }
      );
    }

    // Skip middleware for public routes
    if (isPublicRoute(pathname)) {
      return response;
    }

    // Apply rate limiting for API routes
    if (pathname.startsWith('/api/')) {
      let rateLimitResult: NextResponse | null = null;

      if (pathname.startsWith('/api/auth/')) {
        rateLimitResult = await rateLimiters.auth(req);
      } else if (pathname.includes('/upload')) {
        rateLimitResult = await rateLimiters.fileUpload(req);
      } else if (isAdminRoute(pathname) || isSensitiveRoute(pathname)) {
        rateLimitResult = await rateLimiters.sensitive(req);
      } else {
        rateLimitResult = await rateLimiters.api(req);
      }

      if (rateLimitResult) {
        return rateLimitResult;
      }
    }

    // Authentication check for protected routes
    if (isProtectedRoute(pathname)) {
      const authResult = await authenticateRequest(req);
      
      if (!authResult.success) {
        await auditLogger.logSecurityEvent({
          action: 'permission_denied',
          severity: 'medium',
          details: {
            type: 'authentication_failed',
            method,
            path: pathname,
            reason: authResult.error,
          },
          ipAddress: getClientIP(req),
          userAgent: req.headers.get('User-Agent') || undefined,
          requestId,
        });

        return new NextResponse(
          JSON.stringify({ 
            error: 'Authentication required',
            message: authResult.error 
          }),
          {
            status: 401,
            headers: {
              'Content-Type': 'application/json',
              ...Object.fromEntries(response.headers.entries()),
            },
          }
        );
      }

      // Add user info to headers for downstream use
      response.headers.set('x-user-id', authResult.user!.id);
      response.headers.set('x-user-role', authResult.user!.role);
      response.headers.set('x-session-id', authResult.sessionId!);

      // Role-based authorization
      const requiredRoles = getRequiredRoles(pathname);
      if (requiredRoles.length > 0) {
        const hasAccess = requiredRoles.some(role => 
          AuthService.hasRole(authResult.user!.role, role)
        );

        if (!hasAccess) {
          await auditLogger.logSecurityEvent({
            userId: authResult.user!.id,
            sessionId: authResult.sessionId,
            action: 'permission_denied',
            severity: 'medium',
            details: {
              type: 'insufficient_permissions',
              method,
              path: pathname,
              userRole: authResult.user!.role,
              requiredRoles,
            },
            ipAddress: getClientIP(req),
            userAgent: req.headers.get('User-Agent') || undefined,
            requestId,
          });

          return new NextResponse(
            JSON.stringify({ 
              error: 'Insufficient permissions',
              required: requiredRoles,
              current: authResult.user!.role
            }),
            {
              status: 403,
              headers: {
                'Content-Type': 'application/json',
                ...Object.fromEntries(response.headers.entries()),
              },
            }
          );
        }
      }

      // Log successful access for audit
      await auditLogger.logApiRequest({
        requestId,
        method,
        url: pathname,
        statusCode: 200, // Will be updated by the actual response
        responseTime: Date.now() - startTime,
        userId: authResult.user!.id,
        ipAddress: getClientIP(req),
        userAgent: req.headers.get('User-Agent') || undefined,
      });
    }

    return response;

  } catch (error) {
    console.error('Middleware error:', error);

    await auditLogger.logSecurityEvent({
      action: 'security_violation',
      severity: 'high',
      details: {
        type: 'middleware_error',
        method,
        path: pathname,
        error: error instanceof Error ? error.message : 'Unknown error',
      },
      ipAddress: getClientIP(req),
      userAgent: req.headers.get('User-Agent') || undefined,
      requestId,
    });

    return new NextResponse(
      JSON.stringify({ error: 'Internal server error' }),
      {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  } finally {
    // Clean up request context
    auditLogger.clearRequestContext(requestId);
  }
}

/**
 * Authenticate request and return user info
 */
async function authenticateRequest(req: NextRequest): Promise<{
  success: boolean;
  user?: any;
  sessionId?: string;
  error?: string;
}> {
  try {
    // Get token from Authorization header
    const authorization = req.headers.get('Authorization');
    if (!authorization || !authorization.startsWith('Bearer ')) {
      return {
        success: false,
        error: 'Missing or invalid authorization header',
      };
    }

    const token = authorization.substring(7);
    
    // Verify JWT token
    const tokenPayload = AuthService.verifyAccessToken(token);
    if (!tokenPayload) {
      return {
        success: false,
        error: 'Invalid or expired token',
      };
    }

    // Validate session
    const session = await AuthService.validateSession(tokenPayload.sessionId);
    if (!session) {
      return {
        success: false,
        error: 'Invalid session',
      };
    }

    // Return user info from token payload
    return {
      success: true,
      user: {
        id: tokenPayload.sub,
        email: tokenPayload.email,
        role: tokenPayload.role,
      },
      sessionId: tokenPayload.sessionId,
    };

  } catch (error) {
    console.error('Authentication error:', error);
    return {
      success: false,
      error: 'Authentication failed',
    };
  }
}

/**
 * Check if request is suspicious
 */
async function isRequestSuspicious(req: NextRequest): Promise<boolean> {
  const userAgent = req.headers.get('User-Agent') || '';
  const pathname = req.nextUrl.pathname;
  const method = req.method;

  // Check for suspicious patterns
  const suspiciousPatterns = [
    // Common attack patterns
    /\.\./,  // Path traversal
    /<script/i,  // XSS
    /union\s+select/i,  // SQL injection
    /wget|curl/i,  // Automated tools
    /nmap|nikto|sqlmap/i,  // Security scanners
    
    // Suspicious paths
    /\/(wp-admin|admin|phpmyadmin)/i,
    /\.(php|asp|jsp)$/i,
    /\/etc\/passwd/i,
    /\/proc\/self/i,
  ];

  // Check URL for suspicious patterns
  if (suspiciousPatterns.some(pattern => pattern.test(pathname))) {
    return true;
  }

  // Check for suspicious user agents
  const suspiciousUserAgents = [
    /bot/i,
    /crawler/i,
    /scanner/i,
    /python-requests/i,
    /curl/i,
    /wget/i,
  ];

  if (suspiciousUserAgents.some(pattern => pattern.test(userAgent))) {
    // Allow legitimate bots but log for monitoring
    if (!/googlebot|bingbot|slurp/i.test(userAgent)) {
      return true;
    }
  }

  // Check for unusual method combinations
  if (method === 'TRACE' || method === 'TRACK') {
    return true;
  }

  return false;
}

/**
 * Check if route is public (doesn't require authentication)
 */
function isPublicRoute(pathname: string): boolean {
  const publicRoutes = [
    '/',
    '/api/auth/login',
    '/api/auth/logout',
    '/api/auth/refresh',
    '/api/health',
    '/login',
    '/register',
    '/_next',
    '/favicon.ico',
    '/robots.txt',
    '/sitemap.xml',
  ];

  return publicRoutes.some(route => 
    pathname === route || 
    pathname.startsWith(route + '/')
  );
}

/**
 * Check if route is protected
 */
function isProtectedRoute(pathname: string): boolean {
  return PROTECTED_ROUTES.some(route => 
    pathname === route || 
    pathname.startsWith(route + '/') ||
    pathname.startsWith(route + '?')
  );
}

/**
 * Check if route is admin-only
 */
function isAdminRoute(pathname: string): boolean {
  return ADMIN_ROUTES.some(route => 
    pathname === route || 
    pathname.startsWith(route + '/')
  );
}

/**
 * Check if route is sensitive (requires stricter rate limiting)
 */
function isSensitiveRoute(pathname: string): boolean {
  const sensitiveRoutes = [
    '/api/users',
    '/api/admin',
    '/api/documents/upload',
    '/api/audit',
  ];

  return sensitiveRoutes.some(route => 
    pathname === route || 
    pathname.startsWith(route + '/')
  );
}

/**
 * Get required roles for a route
 */
function getRequiredRoles(pathname: string): string[] {
  for (const [route, roles] of Object.entries(ROLE_ROUTES)) {
    if (pathname === route || pathname.startsWith(route + '/')) {
      return roles;
    }
  }

  // Default admin routes
  if (isAdminRoute(pathname)) {
    return ['admin'];
  }

  return [];
}

/**
 * Get client IP address from request
 */
function getClientIP(req: NextRequest): string {
  const forwardedFor = req.headers.get('X-Forwarded-For');
  const realIP = req.headers.get('X-Real-IP');
  const cfConnectingIP = req.headers.get('CF-Connecting-IP');
  
  if (forwardedFor) {
    return forwardedFor.split(',')[0].trim();
  }
  
  if (realIP) {
    return realIP;
  }
  
  if (cfConnectingIP) {
    return cfConnectingIP;
  }

  return req.ip || '127.0.0.1';
}

// Configure which paths the middleware should run on
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!_next/static|_next/image|favicon.ico).*)',
  ],
};